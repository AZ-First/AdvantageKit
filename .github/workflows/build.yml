name: Build

on:
  push:
  pull_request:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build:
    strategy:
      matrix:
        include:
          - name: "Athena"
            runner-image: ubuntu-latest
            build-options: "-Ponlylinuxathena"
          - name: "Linux"
            runner-image: ubuntu-latest
            build-options: "-Ponlylinuxx86-64 -PskipJava=1"
            classifier: "linuxx86-64"
          - name: "macOS"
            runner-image: macos-latest
            build-options: "-Ponlyosxuniversal -PskipJava=1"
            classifier: "osxuniversal"
          - name: "Windows"
            runner-image: windows-latest
            build-options: "-Ponlywindowsx86-64 -PskipJava=1"
            classifier: "windowsx86-64"
    name: "Build for ${{ matrix.name }}"
    runs-on: ${{ matrix.runner-image }}
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
      - name: "Setup Java"
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"
      - name: "Setup Python"
        uses: actions/setup-python@v5
      - name: "Install RoboRIO toolchain"
        if: matrix.name == 'Athena'
        run: ./gradlew :akit:installRoboRioToolchain
      - name: "Build and test"
        run: ./gradlew :akit:build ${{ matrix.build-options }}
      - name: "Development: Publish local"
        if: github.event_name != 'release'
        run: ./gradlew :akit:publishAllPublicationsToMavenRepository ${{ matrix.build-options }}
      - name: "Release: Get version number"
        id: get_version
        if: github.event_name == 'release'
        uses: battila7/get-version-action@v2
      - name: "Release: Get release info"
        id: get_release_info
        if: github.event_name == 'release' && matrix.name == 'Athena'
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: "Release: Publish (Gradle)"
        if: github.event_name == 'release' && matrix.name == 'Athena'
        run: ./gradlew :akit:publish "-PpublishingVersion=${{ steps.get_version.outputs.version-without-v }}" ${{ matrix.build-options }}
        env:
          GITHUB_ACTOR: jwbonner
          GITHUB_TOKEN: ${{ github.token }}
      - name: "Release: Publish (Manual)"
        if: github.event_name == 'release' && matrix.name != 'Athena'
        run: |
          ./gradlew :akit:publishAllPublicationsToMavenRepository "-PpublishingVersion=${{ steps.get_version.outputs.version-without-v }}" ${{ matrix.build-options }}
          pip install requests
          python publish_zip.py --url https://maven.pkg.github.com/jwbonner/AdvantageKit --group_id org.littletonrobotics.akit --artifact_id akit-wpilibio --version ${{ steps.get_version.outputs.version-without-v }} --classifier ${{ matrix.classifier }} --file_path akit/build/outputs/_M__GROUP_org_littletonrobotics_akit_ID_akit-wpilibio_CLS-${{ matrix.classifier }}.zip --username Mechanical-Advantage --access_token ${{ secrets.GITHUB_TOKEN }}
      - name: "Release: Upload vendordep"
        if: github.event_name == 'release' && matrix.name == 'Athena'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: akit/build/vendordep/AdvantageKit.json
          asset_name: AdvantageKit.json
          asset_content_type: application/json
      - name: "Upload local repo"
        uses: actions/upload-artifact@v4
        with:
          name: maven_${{ matrix.name }}
          path: akit/build/repos/releases

  combine:
    name: "Combine Maven Offline"
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: "Download Athena"
        uses: actions/download-artifact@v4
        with:
          name: maven_Athena
          path: maven_Athena
      - name: "Download Linux"
        uses: actions/download-artifact@v4
        with:
          name: maven_Linux
          path: maven_Linux
      - name: "Download macOS"
        uses: actions/download-artifact@v4
        with:
          name: maven_macOS
          path: maven_macOS
      - name: "Download Windows"
        uses: actions/download-artifact@v4
        with:
          name: maven_Windows
          path: maven_Windows
      - name: "Combine"
        run: |
          rsync -a maven_Athena/* maven_offline
          rsync -a maven_macOS/* maven_offline
          rsync -a maven_Linux/* maven_offline
          rsync -a maven_Windows/* maven_offline
          zip -r maven_offline.zip maven_offline
      - name: "Upload artifact"
        uses: actions/upload-artifact@v4
        with:
          name: maven
          path: maven_offline
      - name: "Release: Get release info"
        id: get_release_info
        if: github.event_name == 'release'
        uses: bruceadams/get-release@v1.2.3
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: "Release: Upload artifact"
        uses: actions/upload-release-asset@v1
        if: github.event_name == 'release'
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: maven_offline.zip
          asset_name: maven_offline.zip
          asset_content_type: application/zip
